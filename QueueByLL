#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node* next;
};

struct node* front = NULL;
struct node* rear = NULL;

void enqueue(struct node* ptr, int item) {
    ptr = (struct node*)malloc(sizeof(struct node));
    if (ptr == NULL) {
        printf("OVERFLOW\n");
        return;
    }
    ptr->data = item;
    ptr->next = NULL;
    if (front == NULL) {
        front = ptr;
        rear = ptr;
    } else {
        rear->next = ptr;
        rear = ptr;
    }
    printf("%d is enqueued into the queue\n", item);
}

void dequeue(struct node* ptr) {
    if (front == NULL) {
        printf("UNDERFLOW\n");
        return;
    }
    ptr = front;
    front = front->next;
    if (front == NULL) {
        rear = NULL;
    }
    printf("%d is dequeued from the queue\n", ptr->data);
    free(ptr);
}

void display() {
    struct node* ptr = front;
    if (front == NULL) {
        printf("Queue is empty\n");
        return;
    }
    printf("Queue elements are: ");
    while (ptr != NULL) {
        printf("%d ", ptr->data);
        ptr = ptr->next;
    }
    printf("\n");
}

int main() {
    int choice, value;
    struct node* ptr;

    printf("1. Enqueue\n");
    printf("2. Dequeue\n");
    printf("3. Display\n");
    printf("4. Exit\n");

    while (1) {
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the value to enqueue: ");
                scanf("%d", &value);
                enqueue(ptr, value);
                break;
            case 2:
                dequeue(ptr);
                break;
            case 3:
                display();
                break;
            case 4:
                exit(0);
            default:
                printf("Invalid choice\n");
        }
    }

    return 0;
}
